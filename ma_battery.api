//--------------------------------------------------------------------------------------------------
/**
 * @page c_battery mangOH Battery  API
 *
 * @ref ma_battery_interface.h "API Reference" <br>
 *
 * @subpage howToBattery "How To Setup Battery" <br>
 *
 * <HR>
 *
 * @section battery_overview Overview
 *
 * This API is used in a non-administrative mode to get battery information and register for
 * notification of battery status changes.
 *
 * @section battery_usage Usage
 *
 * ma_battery_GetHealthStatus() provides information on health of the battery
 * @code
 * ma_battery_HealthStatus_t healthCode = ma_battery_GetHealthStatus();
 * @endcode
 *
 * ma_battery_GetChargingStatus() provides status as to whether battery is charging, discharging,
 * full, etc.
 * @code
 * ma_battery_ChargingStatus_t statusCode = ma_battery_GetChargingStatus();
 * @endcode
 *
 * ma_battery_GetVoltage() provides current voltage of the battery
 * @code
 * double mV; // millivolts
 * le_result_t res = ma_battery_GetVoltage(&mV);
 * LE_FATAL_IF(res != LE_OK, "ma_battery_GetVoltage() failed (%s)", LE_RESULT_TXT(res));
 * @endcode
 *
 * ma_battery_GetTemp() provides current temperature of the current monitor connected to battery
 * @code
 * double degC;
 * le_result_t res = ma_battery_GetTemp(&degC);
 * LE_FATAL_IF(res != LE_OK, "ma_battery_GetTemp() failed (%s)", LE_RESULT_TXT(res));
 * @endcode
 *
 * ma_battery_GetPercentRemaining() provides remaining battery capacity in percentage.
 * @code
 * uint16_t percent;
 * le_result_t res = ma_battery_GetPercentRemaining(&percent);
 * LE_FATAL_IF(res != LE_OK, "ma_battery_GetPercentRemaining() failed (%s)", LE_RESULT_TXT(res));
 * @endcode
 *
 * ma_battery_GetChargeRemaining() provides remaining battery capacity in mAh of charge.
 * @code
 * uint16_t mAh;
 * le_result_t res = ma_battery_GetChargeRemaining(&mAh);
 * LE_FATAL_IF(res != LE_OK, "ma_battery_GetEnergyRemaining() failed (%s)", LE_RESULT_TXT(res));
 * @endcode
 *
 * ma_battery_AddLevelPercentageHandler() can be used to register for notification callbacks
 * when the battery level goes above or below specified thresholds.
 * ma_battery_RemoveLevelPercentageHandler() can be used to cancel one of these registrations.
 *
 * ma_battery_AddHealthChangeHandler() can be used to register for notification callbacks when
 * the health status of the battery changes.  ma_battery_RemoveHealthChangeHandler() can be used
 * to cancel one of these registrations.
 *
 * ma_battery_AddChargingStatusChangeHandler() can be used to register for notification callbacks
 * when the battery charging status changes.  ma_battery_RemoveChargingStatusChangeHandler() can
 * be used to cancel one of these registrations.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Charging status of battery
 */
//--------------------------------------------------------------------------------------------------
ENUM ChargingStatus
{
    DISCHARGING,   ///< The battery must be discharging when there is no good power source or
                   ///< there is a charge fault.  It could also be discharging when in
                   ///< "supplement mode" but there is no way to tell when it's in that mode.
    CHARGING,      ///< Battery is being charged
    FULL,          ///< Battery is fully charged
    CHARGEUNDEFINED,     ///< Battery condition is not defined
    CHARGEERROR,         ///< Error
};


//--------------------------------------------------------------------------------------------------
/**
 * Health status of battery
 */
//--------------------------------------------------------------------------------------------------
ENUM HealthStatus
{
    OVERVOLTAGE,     ///< Battery over-voltage limit is clamped at some % above the battery
                     ///< regulation voltage. When battery over voltage occurs, the charger device
                     ///< immediately disables charge
    GOOD,            ///< Battery is in good health
    COLD,            ///< Battery is cold and cannot charge. Check datasheet
    HOT,             ///< Battery is hot and cannot charge.  Check datasheet
    HEALTHUNDEFINED, ///< Battery health not defined
    HEALTHERROR,     ///< Error in getting health
    DISCONNECTED,    ///< Battery is not connected.
};


//--------------------------------------------------------------------------------------------------
/**
 * Maximum number of characters in a battery type string (excluding any terminator character).
 */
//--------------------------------------------------------------------------------------------------
DEFINE MAX_BATT_TYPE_STR_LEN = 128;

//--------------------------------------------------------------------------------------------------
/**
 * Provides battery charging status
 *
 * @return Charging status code.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ChargingStatus GetChargingStatus
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Provides battery health status
 *
 * @return Health status code.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION HealthStatus GetHealthStatus
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get battery voltage (in Volts)
 *
 * @return
 *     - LE_OK on success.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetVoltage
(
    double      voltage OUT    ///< The battery voltage, in V, if LE_OK is returned.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get battery current (in mA)
 *
 * @return
 *     - LE_OK on success.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCurrent
(
    double      current OUT    ///< The battery current, in mA, if LE_OK is returned.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get battery temperature in degrees Celcius
 *
 * @return
 *     - LE_OK on success.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTemp
(
    double       temp   OUT   ///< Temperature in degrees Celcius, if LE_OK is returned.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get charge remaining, in percentage
 *
 * @return
 *     - LE_OK on success
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPercentRemaining
(
    uint16     percent   OUT  ///< Percentage battery remaining, if LE_OK is returned.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get charge remaining, in mAh
 *
 * @ return
 *    - LE_OK on success
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetChargeRemaining
(
    uint16 charge       OUT  ///< Charge in mAh remaining, if LE_OK is returned.
);


//--------------------------------------------------------------------------------------------------
/**
 * Percentage charge level change event handler (callback).
 */
//--------------------------------------------------------------------------------------------------
HANDLER LevelPercentageHandler
(
    uint8 percentage IN,        ///< The battery charge percentage.
    uint8 percentageTrigger IN, ///< The percentage threshold that triggered this notification.
    bool isHighLevel IN         ///< true = percentage is higher than trigger level, false = lower.
);

//--------------------------------------------------------------------------------------------------
/**
 * Register a callback function to be called the battery level goes above levelHigh or
 * below levelLow.
 */
//--------------------------------------------------------------------------------------------------
EVENT LevelPercentage
(
    uint8 levelLow IN,              ///< Low percentage trigger threshold (0 = no low level alarm)
    uint8 levelHigh IN,             ///< High percentage trigger threshold (>=100 means no high alm)
    LevelPercentageHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Battery health change event handler (callback).
 */
//--------------------------------------------------------------------------------------------------
HANDLER HealthHandler
(
    HealthStatus health IN
);

//--------------------------------------------------------------------------------------------------
/**
 * Register a callback function to be called when there is a change in battery health status.
 */
//--------------------------------------------------------------------------------------------------
EVENT HealthChange
(
    HealthHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Battery charge change event handler (callback).
 */
//--------------------------------------------------------------------------------------------------
HANDLER ChargingStatusHandler
(
    ChargingStatus condition IN
);

//--------------------------------------------------------------------------------------------------
/**
 * Register a callback function to be called when there is a change in battery charging status.
 */
//--------------------------------------------------------------------------------------------------
EVENT ChargingStatusChange
(
    ChargingStatusHandler handler
);
